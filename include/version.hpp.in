/**
 * @file version.hpp
 * @brief Generated Versioning information
 *
 * This file is automatically generated by CMake at configuration. It provies a
 * number of versioning variables for the code to make use of, including the
 * major, minor, and patch version, in addition to the current git commit hash,
 * for exact build determination, and release type.
 *
 * This version information follows
 * [SemVer](https://semver.org/spec/v2.0.0.html), and is automatically generated
 * by CMake at configuration time. Given a version number
 * `MAJOR.MINOR.PATCH-PRE_RELEASE+BUILD`, increment the:
 *
 * 1. `MAJOR` version when you make incompatible API changes,
 * 2. `MINOR` version when you add functionality in a backwards compatible
 * manner, and
 * 3. `PATCH` version when you make backwards compatible bug fixes.
 *
 * The `PRE_RELEASE` must be manually defined at configure time, or it will be
 * defaulted to the CMake build type specified. To specify the `PRE_RELEASE`,
 * add `-DRELEASE=<pre-release name>` to the CMake configure command. The
 * `BUILD` is set to the current git hash, to specify the specific version of
 * the project.
 *
 * @warning Do not manually edit this file. Always use CMake to generate the the
 * files with the newest versioning information.
 *
 * @author CMake
 */
#ifndef @PROJECT_ID@_VERSION_HPP_
#define @PROJECT_ID@_VERSION_HPP_

/**
 * This is generated from the `@PROJECT_ID@_VERSION_CORE`, the
 * `@PROJECT_ID@_VERSION_RELEASE` if it has been defined, and the
 * `@PROJECT_ID@_VERSION_BUILD`.
 *
 * @sa @PROJECT_ID@_VERSION_CORE @PROJECT_ID@_VERSION_RELEASE
 * @PROJECT_ID@_VERSION_BUILD
 */
#define @PROJECT_ID@_VERSION "@PROJECT_SEMVER@"
/**
 * This is generated from the `@PROJECT_ID@_VERSION_MAJOR`,
 * `@PROJECT_ID@_VERSION_MINOR`, and `@PROJECT_ID@_VERSION_PATCH`.
 *
 * @sa @PROJECT_ID@_VERSION_MAJOR @PROJECT_ID@_VERSION_MINOR
 * @PROJECT_ID@_VERSION_PATCH
 */
#define @PROJECT_ID@_VERSION_CORE "@PROJECT_VERSION_CORE@"
/**
 * This is defined at configure time, if at configure time the `RELEASE`
 * variable is set to `prod`, then this is empty. If the `RELEASE` variable is
 * not set at configure time, then the current `CMAKE_BUILD_TYPE` is used
 * instead.
 *
 * To set this at configuration time, either set it in the CMake GUI, or add the
 * command line option: `-DRELEASE=<release name>`.
 *
 * Common uses of this would be to denote `alpha`, `beta`, or `gamma` builds,
 * and to ensure that the released version is an intended `prod` build.
 */
#define @PROJECT_ID@_VERSION_RELEASE "@PROJECT_VERSION_RELEASE@"
/**
 * This defines the project major version. It should be manually incrented in
 * the project root *CMakeLists.txt*, when an incompatiable API change is made.
 */
#define @PROJECT_ID@_VERSION_MAJOR @PROJECT_VERSION_MAJOR@
/**
 * This defines the project minor version. It should be manually incrented in
 * the project root *CMakeLists.txt*, when functionality is added in a backwards
 * compatible manner.
 */
#define @PROJECT_ID@_VERSION_MINOR @PROJECT_VERSION_MINOR@
/**
 * This defines the project minor version. It should be manually incrented in
 * the project root *CMakeLists.txt*, when a backwards compatible bug fix is
 * made.
 */
#define @PROJECT_ID@_VERSION_PATCH @PROJECT_VERSION_PATCH@
/**
 * This defines the first 7 characters in the git commit hash. This is usually
 * sufficent for the purposes of determining the exact version of a build. If
 * more specification is neccessary see
 * [@PROJECT_ID@_VERSION_COMMIT](@ref @PROJECT_ID@_VERSION_COMMIT).
 *
 * @sa @PROJECT_ID@_VERSION_COMMIT
 */
#define @PROJECT_ID@_VERSION_BUILD "@PROJECT_VERSION_BUILD@"
/**
 * This defines the entire git commit hash, at configure time. It is useful for
 * determining the exact version of the project that was used.
 *
 * @sa @PROJECT_ID@_VERSION_BUILD
 */
#define @PROJECT_ID@_VERSION_COMMIT "@PROJECT_VERSION_COMMIT_FULL@"

#endif // @PROJECT_ID@_VERSION_HPP_
